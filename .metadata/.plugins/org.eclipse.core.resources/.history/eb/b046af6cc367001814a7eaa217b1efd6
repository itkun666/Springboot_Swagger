/**
 * @(#)File.java 1.0 2018年5月28日
 *
 * Copyright (c) 2016, YUNXI. All rights reserved.
 * YUNXI PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
package com.dtyunxi.nuskin.tw.personaloffer.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import org.apache.tomcat.util.codec.binary.Base64;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.util.FileCopyUtils;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

/**
 * @author admin
 *
 */
@Component
public class FileUtil {


    @Value("${upload.rootpath}")
    private String rootPath;

    public static SimpleDateFormat sdf = new SimpleDateFormat("YYYYMMdd");


    /**
     * 图片按天分文件夹存储
     *
     * @param base64Files
     * @return
     */
    public String saveFiles(String base64Files) {
        String urls = new String();
        final String timePath = sdf.format(Calendar.getInstance().getTime()) + "/";
        final String path = rootPath + timePath;
        File directory = new File(path);
        if (!directory.exists() || !directory.isDirectory()) {
            directory.mkdir();
        }
        if (base64Files.length() < 1024) {
            return urls;
        }
        String[] images = base64Files.split("#");
        for (String image : images) {
            File toFile = new File(path + System.nanoTime() + ".png");
            try {
                FileCopyUtils.copy(Base64.decodeBase64(image), toFile);
                //FileUtils.writeByteArrayToFile(toFile, Base64.decodeBase64(image));
            } catch (IOException e) {
                throw new RuntimeException("上传图片异常", e);
            }
            if (!StringUtils.isEmpty(urls)) {
                urls = urls + "," + timePath + toFile.getName();
            } else {
                urls = urls + timePath + toFile.getName();
            }
        }
        return urls;
    }

    /**
     * 读取图片文件内容，并转为Base64编码
     *
     * @param filePath 文件路径
     * @return 图片内容Base64编码的字符串
     */
    public String getImageBase64Content(String filePath) {
        File imgFile = new File(filePath);
        byte[] bytes = null;
        try {
            InputStream is = new FileInputStream(imgFile);
            long length = imgFile.length();
            bytes = new byte[(int) length];

            int offset = 0, numRead = 0;
            while (offset < bytes.length
                    && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {
                offset += numRead;
            }
            is.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return Base64.encodeBase64String(bytes);
    }

    public String saveFiles(MultipartFile file) {
        final String timePath = sdf.format(Calendar.getInstance().getTime());
        File directory = new File(rootPath + "/" + timePath);
        if (!directory.exists() || !directory.isDirectory()) {
            directory.mkdirs();
        }
        final String path = rootPath + timePath;
        String fileName = System.nanoTime() + ".png";
        File dest = new File(path + "/" + fileName);
        if (!dest.exists()) {
            try {
                dest.createNewFile();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        try {
            file.transferTo(dest); //保存文件
        } catch (IllegalStateException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return timePath + "/" + fileName;
    }


}
