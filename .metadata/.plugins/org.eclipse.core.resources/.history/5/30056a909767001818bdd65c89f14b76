package com.dtyunxi.nuskin.tw.personaloffer.biz.manager.impl;


import javax.annotation.Resource;

import com.dtyunxi.nuskin.tw.personaloffer.biz.manager.UserManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.dtyunxi.nuskin.tw.personaloffer.dal.dao.UserDAO;
//import User;
//import WebMember;
import com.dtyunxi.nuskin.tw.personaloffer.external.proxy.UserQueryServiceProxy;
import com.dtyunxi.nuskin.tw.center.member.dto.WebPOUserDto;
import com.dtyunxi.nuskin.tw.center.member.eo.WebMemberEo;
import com.dtyunxi.rest.RestResponse;

@Component(value="userManager")
//@CacheConfig(cacheNames = "remote-item")
@Transactional(readOnly = true,propagation = Propagation.SUPPORTS)
//@Validated//开启校验
public class UserManagerImpl implements UserManager {
	private static final Logger log = LoggerFactory.getLogger(UserManagerImpl.class);

	@Resource
	private UserDAO userDAO;

	@Autowired
	private UserQueryServiceProxy userQueryServiceProxy;

//	@Override
//	public PageInfo<UserInfoVo> getUserInfos(Integer pageNum, Integer pageSize) {
//		PageInfo<UserInfoVo> userInfoVos = new PageInfo<>();
//		BeanUtils.copyProperties(userQueryApiProxy.getUsers(pageNum, pageSize), userInfoVos);
//		return userInfoVos;
//	}

//	@Override
//	public PageInfo<UserInfoVo> getUserInfos(Integer pageNum, Integer pageSize) {
//		return null;
//	}

//	@Override
//	public PageInfo<User> getUsers(Integer pageNum, Integer pageSize) {
//		PageInfo<User> users = null;
//		PageHelper.orderBy("id desc");
//		PageHelper.startPage(pageNum, pageSize);
//		try {
//			users = new PageInfo<>(userDAO.selectByExample(null), pageSize);
//		} catch (DataAccessException e) {
//			log.error("selectByExample Item failed.",e);
//		}
//		return users;
//	}

	/**退出登录*/
	@Override
	public RestResponse logout(String token) {
		return userQueryServiceProxy.logout(token);
	}
	/**校验昵称的合法性*/
	@Override
	public RestResponse checkNickName(String nickName, String memberId) {
		return userQueryServiceProxy.checkNickName(nickName, memberId);
	}

	/**根据token查询用户信息*/
	@Override
	public RestResponse getMemberInfoByToken(String token) {
		return userQueryServiceProxy.getMemberInfoByToken(token);
	}

	@Override
	public RestResponse login(WebPOUserDto webPOUserDto) {
		return userQueryServiceProxy.login(webPOUserDto);
	}

	/**根据用户ID更新用户信息*/
	@Override
	public RestResponse updateMember(MultipartFile file ,WebMemberEo webMemberEo) {
		return userQueryServiceProxy.updateUserInfo(file,webMemberEo);
	}
	/**根据会员ID更新昵称*/
	@Override
	public RestResponse updateNickName(String nickName, String memberId) {
		return userQueryServiceProxy.updateNickName(nickName, memberId);
	}


}
